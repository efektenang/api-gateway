// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id    String      @id
  user_name  String
  full_name  String?
  email      String      @unique
  password   String
  phone      String?
  role_user  String
  created_by String
  created_at DateTime    @default(now())
  updated_by String?
  updated_at DateTime?
  deleted_by String?
  deleted_at DateTime?
  workspaces workspace[]
}

model workspace {
  workspace_id Int                @id @default(autoincrement())
  name         String
  description  String?
  created_by   String
  created_at   DateTime           @default(now())
  updated_by   String?
  updated_at   DateTime?
  deleted_by   String?
  deleted_at   DateTime?
  user         user?              @relation(fields: [owner_id], references: [user_id])
  owner_id     String?
  member       workspace_member[]
}

model workspace_member {
  member_id           Int        @id @default(autoincrement())
  member_user_id      String
  rule                String
  description         String?
  created_by          String
  created_at          DateTime
  updated_by          String?
  updated_at          DateTime?
  deleted_by          String?
  deleted_at          DateTime?
  workspace           workspace? @relation(fields: [member_workspace_id], references: [workspace_id])
  member_workspace_id Int?
}

model service {
  service_id   String    @id
  workspace_id Int
  name         String
  description  String?
  protocol     String
  host         String
  port         Int
  status       String
  created_by   String
  created_at   DateTime  @default(now())
  updated_by   String?
  updated_at   DateTime?
  deleted_by   String?
  deleted_at   DateTime?
}

model whitelist_address {
  id         Int     @id @default(autoincrement())
  service_id String
  address    String
  type       String?
}

model routes {
  route_id     Int                @id
  service_id   String
  name         String
  description  String?
  valid_header String
  path         String?
  created_by   String
  created_at   DateTime           @default(now())
  updated_by   String?
  updated_at   DateTime?
  deleted_by   String?
  deleted_at   DateTime?
  method       endpoint_methods[]
}

model endpoint_methods {
  id              Int       @id @default(autoincrement())
  method          String
  description     String?
  created_by      String
  created_at      DateTime
  updated_by      String?
  updated_at      DateTime?
  deleted_by      String?
  deleted_at      DateTime?
  routes          routes?   @relation(fields: [method_route_id], references: [route_id])
  method_route_id Int?
}
